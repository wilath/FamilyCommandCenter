{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class TasksService {\n  constructor() {\n    this.taskList$ = new BehaviorSubject([]);\n    this.memberList$ = new BehaviorSubject([]);\n    this.history$ = new BehaviorSubject([]);\n    this.activeMember = '';\n    const taskList = [{\n      id: 528,\n      name: 'Water Plants',\n      created: new Date('2023-04-23 18:10:53'),\n      isDone: false,\n      member: 'John',\n      assignedBy: 'Daphne',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 529,\n      name: 'Walk the dog',\n      created: new Date('2023-03-22 17:10:10'),\n      isDone: false,\n      member: 'Mark',\n      assignedBy: 'Daphne',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 530,\n      name: 'Grocery shopping',\n      created: new Date('2024-07-21 20:05:55'),\n      isDone: false,\n      member: 'Mark',\n      assignedBy: 'Mark',\n      importance: 'high',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 531,\n      name: 'Change sheets',\n      created: new Date('2023-02-21 03:29:11'),\n      isDone: false,\n      member: 'Daphne',\n      assignedBy: 'Mark',\n      importance: 'high',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 532,\n      name: 'Learn Angular',\n      created: new Date('2023-04-23 15:11:11'),\n      isDone: false,\n      member: 'Daphne',\n      assignedBy: 'Daphne',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 533,\n      name: 'Clean the kitchen',\n      created: new Date('2023-03-21 13:19:14'),\n      end: new Date('2022-07-25 18:29:41'),\n      isDone: true,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 534,\n      name: 'Laundry',\n      created: new Date('2023-02-05 05:21:57'),\n      end: new Date('2022-07-25 18:54:11'),\n      isDone: true,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 526,\n      name: 'Wash the car',\n      created: new Date('2023-02-04 01:21:54'),\n      isDone: false,\n      member: 'John',\n      assignedBy: 'John',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 525,\n      name: 'Wrap presents',\n      created: new Date('2023-02-03 04:11:57'),\n      isDone: false,\n      member: 'Julian',\n      assignedBy: 'John',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 527,\n      name: 'Clean the fireplace',\n      created: new Date('2023-02-04 05:11:17'),\n      isDone: false,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }];\n    this.taskList$.next(taskList);\n    const members = [{\n      name: 'John',\n      class: 'Adult',\n      color: 'var(--fandango)'\n    }, {\n      name: 'Daphne',\n      class: 'Adult',\n      color: 'var(--thulian-pink)'\n    }, {\n      name: 'Mark',\n      class: 'Child',\n      color: 'var(--dutch-white)'\n    }, {\n      name: 'Julian',\n      class: 'Child',\n      color: 'var(--ice-blue)'\n    }];\n    for (let i = 0; i < taskList.length; i++) {\n      this.addTaskToHistory(taskList[i], 'add');\n    }\n    this.memberList$.next(members);\n    localStorage.setItem(\"myCat\", \"Tom\");\n    localStorage.setItem(\"myCat\", \"Tom\");\n    localStorage.setItem(\"myCat\", \"Tom\");\n  }\n  add(task) {\n    const list = this.taskList$.getValue();\n    list.push(task);\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'add');\n  }\n  addMember(member) {\n    const mem = this.memberList$.getValue();\n    mem.push(member);\n    this.memberList$.next(mem);\n    this.addMemberToHistory(member, 'add');\n  }\n  deleteMember(member, active) {\n    var list = this.taskList$.getValue();\n    var mems = this.memberList$.getValue();\n    const index = mems.findIndex(e => e.name === active);\n    if (member === 'delete') {\n      list = list.filter(e => e.member !== active);\n      this.taskList$.next(list);\n    } else {\n      list = list.map(item => {\n        if (item.member === active) {\n          return {\n            ...item,\n            member: member\n          };\n        } else {\n          return item;\n        }\n      });\n      this.taskList$.next(list);\n    }\n    this.addMemberToHistory(mems[index], 'delete');\n    mems.splice(index, 1);\n  }\n  done(task) {\n    task.end = new Date();\n    task.isDone = true;\n    var list = this.taskList$.getValue();\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'done');\n  }\n  undone(task) {\n    task.isDone = false;\n    delete task.end;\n    let list = this.taskList$.getValue();\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'undone');\n  }\n  editTask(task, id) {\n    var list = this.taskList$.getValue();\n    const index = list.findIndex(e => e.id === id);\n    if (index !== -1) {\n      list[index].name = task.value.name;\n      list[index].deadline = task.value.deadline;\n      list[index].assignedBy = task.value.for;\n      list[index].importance = task.value.urgent;\n      list[index].created = task.value.created;\n      if (task.value.member) {\n        list[index].member = task.value.member;\n      }\n    }\n    this.taskList$.next(list);\n    this.addTaskToHistory(list[index], 'edit');\n  }\n  dropTask(id, newMember) {\n    var list = this.taskList$.getValue();\n    const index = list.findIndex(e => e.id === id);\n    if (newMember !== list[index].member) {\n      if (index !== -1) {\n        list[index].member = newMember;\n      }\n      this.taskList$.next(list);\n      this.addTaskToHistory(list[index], 'edit');\n    }\n  }\n  remove(task) {\n    var list = this.taskList$.getValue();\n    list = list.filter(e => e !== task);\n    this.taskList$.next(list);\n  }\n  deleteall() {\n    var list = this.taskList$.getValue();\n    list = [];\n    this.taskList$.next(list);\n  }\n  getTaskListObs() {\n    return this.taskList$.asObservable();\n  }\n  getMemberListObs() {\n    return this.memberList$.asObservable();\n  }\n  getHistoryListObs() {\n    return this.history$.asObservable();\n  }\n  addTaskToHistory(item, action) {\n    let cDate = item.created.toLocaleString();\n    let aDate = new Date().toLocaleDateString();\n    let eDate = item.end?.toLocaleDateString();\n    let hist = this.history$.getValue();\n    let task = '';\n    switch (action) {\n      case 'add':\n        task = cDate + ' - ' + item.assignedBy + ' added new task: ' + item.name + '(' + item.id + ')';\n        break;\n      case 'delete':\n        task = aDate + ' - ' + this.activeMember + ' deleted task: ' + item.name + '(' + item.id + ')';\n        break;\n      case 'edit':\n        task = aDate + ' - ' + this.activeMember + ' edited task: ' + item.name + '(' + item.id + ')';\n        break;\n      case 'done':\n        task = eDate + ' - ' + item.member + ' finished task: ' + item.name + '(' + item.id + ')';\n        break;\n      case 'undone':\n        task = aDate + ' - ' + this.activeMember + ' undone task: ' + item.name + '(' + item.id + ')';\n        break;\n    }\n    hist.push(task);\n    this.history$.next(hist);\n  }\n  addMemberToHistory(item, action) {\n    let date = new Date().toLocaleDateString();\n    let hist = this.history$.getValue();\n    let task = '';\n    switch (action) {\n      case 'add':\n        task = date + ' - ' + this.activeMember + ' added new member: ' + item.name;\n        break;\n      case 'delete':\n        task = date + ' - ' + this.activeMember + ' deleted member: ' + item.name;\n        break;\n      case 'edit':\n        task = date + ' - ' + this.activeMember + ' edited member: ' + item.name;\n        break;\n    }\n    hist.push(task);\n    this.history$.next(hist);\n  }\n}\nTasksService.ɵfac = function TasksService_Factory(t) {\n  return new (t || TasksService)();\n};\nTasksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TasksService,\n  factory: TasksService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","TasksService","constructor","taskList","id","name","created","Date","isDone","member","assignedBy","importance","deadline","end","taskList$","next","members","class","color","i","length","addTaskToHistory","memberList$","localStorage","setItem","add","task","list","getValue","push","addMember","mem","addMemberToHistory","deleteMember","active","mems","index","findIndex","e","filter","map","item","splice","done","undone","editTask","value","for","urgent","dropTask","newMember","remove","deleteall","getTaskListObs","asObservable","getMemberListObs","getHistoryListObs","history$","action","cDate","toLocaleString","aDate","toLocaleDateString","eDate","hist","activeMember","date","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sebastian\\Desktop\\Pages\\angapp\\src\\app\\services\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Task } from '../model/task';\nimport { Member } from '../model/member';\nimport { NgForm } from '@angular/forms';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksService {\n  \n\n  private taskList$ = new BehaviorSubject<Array<Task>>([]);\n  private memberList$ = new BehaviorSubject<Array<Member>>([]);\n  private history$ = new BehaviorSubject<Array<string>>([]);\n  public activeMember: string = ''\n\n  constructor() {\n   const taskList = [\n      {id: 528, name: 'Water Plants', created: new Date('2023-04-23 18:10:53'), isDone: false, member: 'John', assignedBy: 'Daphne', importance: 'normal', deadline: new Date('2023-05-23 18:10:53') },\n      {id: 529, name: 'Walk the dog', created: new Date('2023-03-22 17:10:10'), isDone: false, member: 'Mark', assignedBy: 'Daphne', importance: 'low', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 530, name: 'Grocery shopping', created: new Date('2024-07-21 20:05:55'), isDone: false, member: 'Mark', assignedBy: 'Mark',  importance: 'high', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 531, name: 'Change sheets', created: new Date('2023-02-21 03:29:11'), isDone: false, member: 'Daphne', assignedBy: 'Mark', importance: 'high', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 532, name: 'Learn Angular', created: new Date('2023-04-23 15:11:11'), isDone: false, member: 'Daphne',assignedBy: 'Daphne', importance: 'normal', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 533, name: 'Clean the kitchen', created: new Date('2023-03-21 13:19:14'), end: new Date('2022-07-25 18:29:41'), isDone: true, member: 'Julian', assignedBy: 'Mark', importance: 'low', deadline: new Date('2023-05-23 18:10:53')  },\n      {id: 534, name: 'Laundry', created: new Date('2023-02-05 05:21:57'), end: new Date('2022-07-25 18:54:11'), isDone: true, member: 'Julian',assignedBy: 'Mark', importance: 'low', deadline: new Date('2023-05-23 18:10:53')},\n      {id: 526, name: 'Wash the car', created: new Date('2023-02-04 01:21:54'),  isDone: false, member: 'John',assignedBy: 'John', importance: 'low', deadline: new Date('2023-05-23 18:10:53')},\n      {id: 525, name: 'Wrap presents', created: new Date('2023-02-03 04:11:57'), isDone: false, member: 'Julian',assignedBy: 'John', importance: 'low', deadline: new Date('2023-05-23 18:10:53')},\n      {id: 527, name: 'Clean the fireplace', created: new Date('2023-02-04 05:11:17'), isDone: false, member: 'Julian',assignedBy: 'Mark', importance: 'normal', deadline: new Date('2023-05-23 18:10:53')}\n    ]\n\n    this.taskList$.next(taskList);\n  \n\n    const members: Array<Member> = [\n      {name: 'John', class: 'Adult', color: 'var(--fandango)'},\n      {name: 'Daphne', class: 'Adult', color: 'var(--thulian-pink)'},\n      {name: 'Mark', class: 'Child', color: 'var(--dutch-white)'},\n      {name: 'Julian', class: 'Child', color: 'var(--ice-blue)'},\n    ]\n\n    for(let i = 0; i < taskList.length ; i++){\n      this.addTaskToHistory(taskList[i], 'add')\n    }\n    \n    this.memberList$.next(members)\n\n    localStorage.setItem(\"myCat\", \"Tom\");\n    localStorage.setItem(\"myCat\", \"Tom\");\n    localStorage.setItem(\"myCat\", \"Tom\");\n  }\n\n  \n\n\n  add(task: Task): void {\n    const list = this.taskList$.getValue();\n    list.push(task)\n    this.taskList$.next(list);\n\n    this.addTaskToHistory(task, 'add')\n  }\n  addMember(member: Member){\n    const mem = this.memberList$.getValue()\n    mem.push(member)\n    this.memberList$.next(mem)\n    this.addMemberToHistory(member, 'add')\n  }\n  deleteMember(member:string, active:string){\n    var list = this.taskList$.getValue()\n    var mems = this.memberList$.getValue()\n    const index = mems.findIndex(e => e.name === active)\n\n    if(member === 'delete'){\n      list = list.filter((e)=> e.member !== active);\n      this.taskList$.next(list)\n\n    } else {\n      list = list.map(item => {\n        if (item.member === active) {\n          return { ...item, member: member };\n        } else {\n          return item;\n        }\n      });\n      this.taskList$.next(list)\n    }\n\n    this.addMemberToHistory(mems[index], 'delete')\n    mems.splice(index,1)\n   \n  }\n  done(task: Task) {\n    task.end = new Date();\n    task.isDone = true;\n    var list = this.taskList$.getValue();\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'done')\n  }\n  undone(task: Task){\n    task.isDone = false;\n    delete task.end\n    let list = this.taskList$.getValue();\n    this.taskList$.next(list)\n    this.addTaskToHistory(task, 'undone')\n    \n  }\n  editTask(task:NgForm, id:number){\n    var list = this.taskList$.getValue()\n\n    const index = list.findIndex(e => e.id === id)\n\n    if (index !== -1) {\n      list[index].name = task.value.name\n      list[index].deadline = task.value.deadline\n      list[index].assignedBy = task.value.for\n      list[index].importance = task.value.urgent;\n      list[index].created = task.value.created;\n      if(task.value.member){\n      list[index].member = task.value.member\n      }\n    }\n\n    this.taskList$.next(list)\n    this.addTaskToHistory(list[index], 'edit')\n  }\n  dropTask(id:number, newMember:string){\n    var list = this.taskList$.getValue()\n    const index = list.findIndex(e => e.id === id)\n    if(newMember !== list[index].member){\n      if(index !== -1){\n        list[index].member = newMember\n      }\n      this.taskList$.next(list)\n      this.addTaskToHistory(list[index], 'edit')\n    }\n    \n  }\n  remove(task: Task) {\n    var list = this.taskList$.getValue();\n    list = list.filter(e => e !== task);\n    this.taskList$.next(list);\n  }\n  deleteall() {\n    var list = this.taskList$.getValue();\n    list = [];\n    this.taskList$.next(list);\n  }\n  getTaskListObs(): Observable<Array<Task>> {\n    return this.taskList$.asObservable();\n  }\n  getMemberListObs(): Observable<Array<Member>>{\n    return this.memberList$.asObservable();\n  }\n  getHistoryListObs(): Observable<Array<string>>{\n    return this.history$.asObservable();\n  }\n  addTaskToHistory(item: Task ,  action: 'add' | 'delete' | 'edit' | 'done' | 'undone' ){\n     let cDate = item.created.toLocaleString()\n     let aDate = new Date().toLocaleDateString()\n     let eDate = item.end?.toLocaleDateString()\n\n     let hist: Array<string> = this.history$.getValue();\n     let task: string = ''\n     \n   \n        switch (action){\n          case 'add':                  \n           task =  cDate  + ' - ' +  item.assignedBy + ' added new task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'delete':            \n           task = aDate  + ' - ' +  this.activeMember + ' deleted task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'edit':        \n          task = aDate  + ' - ' +  this.activeMember + ' edited task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'done':           \n          task = eDate  + ' - ' +  item.member + ' finished task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'undone':           \n          task = aDate  + ' - ' +  this.activeMember + ' undone task: ' + item.name + '(' + item.id + ')';\n          break;\n          \n        }\n      hist.push(task)\n      this.history$.next(hist)\n      \n    }\n  addMemberToHistory(item: Member, action: 'add' | 'edit' | 'delete'){\n    let date = new Date().toLocaleDateString();\n    let hist: Array<string> = this.history$.getValue();\n    let task: string = '';\n    switch (action){\n      case 'add':                  \n       task =  date  + ' - ' +  this.activeMember  + ' added new member: ' + item.name\n      break;\n      case 'delete':            \n       task = date  + ' - ' +  this.activeMember + ' deleted member: ' + item.name\n      break;\n      case 'edit':        \n      task = date  + ' - ' +  this.activeMember + ' edited member: ' + item.name \n      break;  \n    }\n    hist.push(task)\n    this.history$.next(hist)\n  }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}