{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class TasksService {\n  constructor() {\n    this.taskList$ = new BehaviorSubject([]);\n    this.memberList$ = new BehaviorSubject([]);\n    this.history$ = new BehaviorSubject([]);\n    this.activeMember = '';\n    const taskList = [{\n      id: 528,\n      name: 'Water Plants',\n      created: new Date('2023-04-23 18:10:53'),\n      isDone: false,\n      member: 'John',\n      assignedBy: 'Daphne',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 529,\n      name: 'Walk the dog',\n      created: new Date('2023-03-22 17:10:10'),\n      isDone: false,\n      member: 'Mark',\n      assignedBy: 'Daphne',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 530,\n      name: 'Grocery shopping',\n      created: new Date('2024-07-21 20:05:55'),\n      isDone: false,\n      member: 'Mark',\n      assignedBy: 'Mark',\n      importance: 'high',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 531,\n      name: 'Change sheets',\n      created: new Date('2023-02-21 03:29:11'),\n      isDone: false,\n      member: 'Daphne',\n      assignedBy: 'Mark',\n      importance: 'high',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 532,\n      name: 'Learn Angular',\n      created: new Date('2023-04-23 15:11:11'),\n      isDone: false,\n      member: 'Daphne',\n      assignedBy: 'Daphne',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 533,\n      name: 'Clean the kitchen',\n      created: new Date('2023-03-21 13:19:14'),\n      end: new Date('2022-07-25 18:29:41'),\n      isDone: true,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 534,\n      name: 'Laundry',\n      created: new Date('2023-02-05 05:21:57'),\n      end: new Date('2022-07-25 18:54:11'),\n      isDone: true,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 527,\n      name: 'Clean the fireplace',\n      created: new Date('2023-02-04 05:11:17'),\n      isDone: false,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }];\n    this.taskList$.next(taskList);\n    const members = [{\n      name: 'John',\n      class: 'Adult',\n      color: 'var(--fandango)'\n    }, {\n      name: 'Daphne',\n      class: 'Adult',\n      color: 'var(--thulian-pink)'\n    }, {\n      name: 'Mark',\n      class: 'Child',\n      color: 'var(--dutch-white)'\n    }, {\n      name: 'Julian',\n      class: 'Child',\n      color: 'var(--ice-blue)'\n    }];\n    for (let i = 0; i < taskList.length; i++) {\n      this.addTaskToHistory(taskList[i], 'add');\n    }\n    this.memberList$.next(members);\n  }\n  add(task) {\n    const list = this.taskList$.getValue();\n    list.push(task);\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'add');\n  }\n  addMember(member) {\n    const mem = this.memberList$.getValue();\n    mem.push(member);\n    this.memberList$.next(mem);\n  }\n  done(task) {\n    task.end = new Date();\n    task.isDone = true;\n    var list = this.taskList$.getValue();\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'done');\n  }\n  undone(task) {\n    task.isDone = false;\n    delete task.end;\n    let list = this.taskList$.getValue();\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'undone');\n  }\n  editTask(task, id) {\n    var list = this.taskList$.getValue();\n    const index = list.findIndex(e => e.id === id);\n    if (index !== -1) {\n      list[index].name = task.value.name;\n      list[index].deadline = task.value.deadline;\n      list[index].assignedBy = task.value.for;\n      list[index].importance = task.value.urgent;\n      list[index].created = task.value.created;\n    }\n    this.taskList$.next(list);\n    this.addTaskToHistory(list[index], 'edit');\n  }\n  dropTask(id, newMember) {\n    var list = this.taskList$.getValue();\n    const index = list.findIndex(e => e.id === id);\n    if (index !== -1) {\n      list[index].member = newMember;\n    }\n    this.taskList$.next(list);\n  }\n  remove(task) {\n    var list = this.taskList$.getValue();\n    list = list.filter(e => e !== task);\n    this.taskList$.next(list);\n  }\n  deleteall() {\n    var list = this.taskList$.getValue();\n    list = [];\n    this.taskList$.next(list);\n  }\n  getTaskListObs() {\n    return this.taskList$.asObservable();\n  }\n  getMemberListObs() {\n    return this.memberList$.asObservable();\n  }\n  getHistoryListObs() {\n    return this.history$.asObservable();\n  }\n  addTaskToHistory(item, action) {\n    let cDate = item.created.toLocaleString();\n    let aDate = new Date().toLocaleDateString();\n    let eDate = item.end?.toLocaleDateString();\n    let hist = this.history$.getValue();\n    let task = '';\n    switch (action) {\n      case 'add':\n        task = cDate + ' - ' + item.assignedBy + ' added new task: ' + item.name + '(' + item.id + ')';\n        break;\n      case 'delete':\n        task = aDate + ' - ' + this.activeMember + ' deleted task: ' + item.name + '(' + item.id + ')';\n        break;\n      case 'edit':\n        task = aDate + ' - ' + this.activeMember + ' edited task: ' + item.name + '(' + item.id + ')';\n        break;\n      case 'done':\n        task = eDate + ' - ' + item.member + ' finished task: ' + item.name + '(' + item.id + ')';\n        break;\n      case 'undone':\n        task = aDate + ' - ' + this.activeMember + ' undone task: ' + item.name + '(' + item.id + ')';\n        break;\n    }\n    hist.push(task);\n    this.history$.next(hist);\n  }\n  addMemberToHistory(item, action) {\n    let date = new Date().toLocaleDateString();\n    let hist = this.history$.getValue();\n    let task = '';\n    switch (action) {\n      case 'add':\n        task = date + ' - ' + this.activeMember + ' added new member: ' + item.name;\n        break;\n      case 'delete':\n        task = date + ' - ' + this.activeMember + ' deleted member: ' + item.name;\n        break;\n      case 'edit':\n        task = date + ' - ' + this.activeMember + ' edited member: ' + item.name;\n        break;\n    }\n    hist.push(task);\n    this.history$.next(hist);\n  }\n}\nTasksService.ɵfac = function TasksService_Factory(t) {\n  return new (t || TasksService)();\n};\nTasksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TasksService,\n  factory: TasksService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AASlD,OAAM,MAAOC,YAAY;EAQvBC;IALQ,cAAS,GAAG,IAAIF,eAAe,CAAc,EAAE,CAAC;IAChD,gBAAW,GAAG,IAAIA,eAAe,CAAgB,EAAE,CAAC;IACpD,aAAQ,GAAG,IAAIA,eAAe,CAAgB,EAAE,CAAC;IAClD,iBAAY,GAAW,EAAE;IAG/B,MAAMG,QAAQ,GAAG,CACd;MAACC,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,cAAc;MAAEC,OAAO,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE,MAAM;MAAEC,UAAU,EAAE,QAAQ;MAAEC,UAAU,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAIL,IAAI,CAAC,qBAAqB;IAAC,CAAE,EAChM;MAACH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,cAAc;MAAEC,OAAO,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE,MAAM;MAAEC,UAAU,EAAE,QAAQ;MAAEC,UAAU,EAAE,KAAK;MAAEC,QAAQ,EAAE,IAAIL,IAAI,CAAC,qBAAqB;IAAC,CAAI,EAC/L;MAACH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,kBAAkB;MAAEC,OAAO,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE,MAAM;MAAEC,UAAU,EAAE,MAAM;MAAGC,UAAU,EAAE,MAAM;MAAEC,QAAQ,EAAE,IAAIL,IAAI,CAAC,qBAAqB;IAAC,CAAI,EACnM;MAACH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE,QAAQ;MAAEC,UAAU,EAAE,MAAM;MAAEC,UAAU,EAAE,MAAM;MAAEC,QAAQ,EAAE,IAAIL,IAAI,CAAC,qBAAqB;IAAC,CAAI,EACjM;MAACH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE,QAAQ;MAACC,UAAU,EAAE,QAAQ;MAAEC,UAAU,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAIL,IAAI,CAAC,qBAAqB;IAAC,CAAI,EACpM;MAACH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,mBAAmB;MAAEC,OAAO,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEM,GAAG,EAAE,IAAIN,IAAI,CAAC,qBAAqB,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,QAAQ;MAAEC,UAAU,EAAE,MAAM;MAAEC,UAAU,EAAE,KAAK;MAAEC,QAAQ,EAAE,IAAIL,IAAI,CAAC,qBAAqB;IAAC,CAAG,EACxO;MAACH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,OAAO,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEM,GAAG,EAAE,IAAIN,IAAI,CAAC,qBAAqB,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,QAAQ;MAACC,UAAU,EAAE,MAAM;MAAEC,UAAU,EAAE,KAAK;MAAEC,QAAQ,EAAE,IAAIL,IAAI,CAAC,qBAAqB;IAAC,CAAC,EAC3N;MAACH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,qBAAqB;MAAEC,OAAO,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE,QAAQ;MAACC,UAAU,EAAE,MAAM;MAAEC,UAAU,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAIL,IAAI,CAAC,qBAAqB;IAAC,CAAC,CACtM;IAED,IAAI,CAACO,SAAS,CAACC,IAAI,CAACZ,QAAQ,CAAC;IAG7B,MAAMa,OAAO,GAAkB,CAC7B;MAACX,IAAI,EAAE,MAAM;MAAEY,KAAK,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAiB,CAAC,EACxD;MAACb,IAAI,EAAE,QAAQ;MAAEY,KAAK,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAqB,CAAC,EAC9D;MAACb,IAAI,EAAE,MAAM;MAAEY,KAAK,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAoB,CAAC,EAC3D;MAACb,IAAI,EAAE,QAAQ;MAAEY,KAAK,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAiB,CAAC,CAC3D;IAED,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,QAAQ,CAACiB,MAAM,EAAGD,CAAC,EAAE,EAAC;MACvC,IAAI,CAACE,gBAAgB,CAAClB,QAAQ,CAACgB,CAAC,CAAC,EAAE,KAAK,CAAC;;IAG3C,IAAI,CAACG,WAAW,CAACP,IAAI,CAACC,OAAO,CAAC;EAEhC;EAKAO,GAAG,CAACC,IAAU;IACZ,MAAMC,IAAI,GAAG,IAAI,CAACX,SAAS,CAACY,QAAQ,EAAE;IACtCD,IAAI,CAACE,IAAI,CAACH,IAAI,CAAC;IACf,IAAI,CAACV,SAAS,CAACC,IAAI,CAACU,IAAI,CAAC;IAEzB,IAAI,CAACJ,gBAAgB,CAACG,IAAI,EAAE,KAAK,CAAC;EACpC;EACAI,SAAS,CAACnB,MAAc;IACtB,MAAMoB,GAAG,GAAG,IAAI,CAACP,WAAW,CAACI,QAAQ,EAAE;IACvCG,GAAG,CAACF,IAAI,CAAClB,MAAM,CAAC;IAChB,IAAI,CAACa,WAAW,CAACP,IAAI,CAACc,GAAG,CAAC;EAC5B;EACAC,IAAI,CAACN,IAAU;IACbA,IAAI,CAACX,GAAG,GAAG,IAAIN,IAAI,EAAE;IACrBiB,IAAI,CAAChB,MAAM,GAAG,IAAI;IAClB,IAAIiB,IAAI,GAAG,IAAI,CAACX,SAAS,CAACY,QAAQ,EAAE;IACpC,IAAI,CAACZ,SAAS,CAACC,IAAI,CAACU,IAAI,CAAC;IACzB,IAAI,CAACJ,gBAAgB,CAACG,IAAI,EAAE,MAAM,CAAC;EACrC;EACAO,MAAM,CAACP,IAAU;IACfA,IAAI,CAAChB,MAAM,GAAG,KAAK;IACnB,OAAOgB,IAAI,CAACX,GAAG;IACf,IAAIY,IAAI,GAAG,IAAI,CAACX,SAAS,CAACY,QAAQ,EAAE;IACpC,IAAI,CAACZ,SAAS,CAACC,IAAI,CAACU,IAAI,CAAC;IACzB,IAAI,CAACJ,gBAAgB,CAACG,IAAI,EAAE,QAAQ,CAAC;EAEvC;EACAQ,QAAQ,CAACR,IAAW,EAAEpB,EAAS;IAC7B,IAAIqB,IAAI,GAAG,IAAI,CAACX,SAAS,CAACY,QAAQ,EAAE;IAEpC,MAAMO,KAAK,GAAGR,IAAI,CAACS,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC/B,EAAE,KAAKA,EAAE,CAAC;IAE9C,IAAI6B,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBR,IAAI,CAACQ,KAAK,CAAC,CAAC5B,IAAI,GAAGmB,IAAI,CAACY,KAAK,CAAC/B,IAAI;MAClCoB,IAAI,CAACQ,KAAK,CAAC,CAACrB,QAAQ,GAAGY,IAAI,CAACY,KAAK,CAACxB,QAAQ;MAC1Ca,IAAI,CAACQ,KAAK,CAAC,CAACvB,UAAU,GAAGc,IAAI,CAACY,KAAK,CAACC,GAAG;MACvCZ,IAAI,CAACQ,KAAK,CAAC,CAACtB,UAAU,GAAGa,IAAI,CAACY,KAAK,CAACE,MAAM;MAC1Cb,IAAI,CAACQ,KAAK,CAAC,CAAC3B,OAAO,GAAGkB,IAAI,CAACY,KAAK,CAAC9B,OAAO;;IAG1C,IAAI,CAACQ,SAAS,CAACC,IAAI,CAACU,IAAI,CAAC;IACzB,IAAI,CAACJ,gBAAgB,CAACI,IAAI,CAACQ,KAAK,CAAC,EAAE,MAAM,CAAC;EAC5C;EACAM,QAAQ,CAACnC,EAAS,EAAEoC,SAAgB;IAClC,IAAIf,IAAI,GAAG,IAAI,CAACX,SAAS,CAACY,QAAQ,EAAE;IACpC,MAAMO,KAAK,GAAGR,IAAI,CAACS,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC/B,EAAE,KAAKA,EAAE,CAAC;IAC9C,IAAG6B,KAAK,KAAK,CAAC,CAAC,EAAC;MACdR,IAAI,CAACQ,KAAK,CAAC,CAACxB,MAAM,GAAG+B,SAAS;;IAEhC,IAAI,CAAC1B,SAAS,CAACC,IAAI,CAACU,IAAI,CAAC;EAC3B;EACAgB,MAAM,CAACjB,IAAU;IACf,IAAIC,IAAI,GAAG,IAAI,CAACX,SAAS,CAACY,QAAQ,EAAE;IACpCD,IAAI,GAAGA,IAAI,CAACiB,MAAM,CAACP,CAAC,IAAIA,CAAC,KAAKX,IAAI,CAAC;IACnC,IAAI,CAACV,SAAS,CAACC,IAAI,CAACU,IAAI,CAAC;EAC3B;EACAkB,SAAS;IACP,IAAIlB,IAAI,GAAG,IAAI,CAACX,SAAS,CAACY,QAAQ,EAAE;IACpCD,IAAI,GAAG,EAAE;IACT,IAAI,CAACX,SAAS,CAACC,IAAI,CAACU,IAAI,CAAC;EAC3B;EAEAmB,cAAc;IACZ,OAAO,IAAI,CAAC9B,SAAS,CAAC+B,YAAY,EAAE;EACtC;EACAC,gBAAgB;IACd,OAAO,IAAI,CAACxB,WAAW,CAACuB,YAAY,EAAE;EACxC;EACAE,iBAAiB;IACf,OAAO,IAAI,CAACC,QAAQ,CAACH,YAAY,EAAE;EACrC;EACAxB,gBAAgB,CAAC4B,IAAU,EAAIC,MAAqD;IACjF,IAAIC,KAAK,GAAGF,IAAI,CAAC3C,OAAO,CAAC8C,cAAc,EAAE;IACzC,IAAIC,KAAK,GAAG,IAAI9C,IAAI,EAAE,CAAC+C,kBAAkB,EAAE;IAC3C,IAAIC,KAAK,GAAGN,IAAI,CAACpC,GAAG,EAAEyC,kBAAkB,EAAE;IAE1C,IAAIE,IAAI,GAAkB,IAAI,CAACR,QAAQ,CAACtB,QAAQ,EAAE;IAClD,IAAIF,IAAI,GAAW,EAAE;IAGlB,QAAQ0B,MAAM;MACZ,KAAK,KAAK;QACT1B,IAAI,GAAI2B,KAAK,GAAI,KAAK,GAAIF,IAAI,CAACvC,UAAU,GAAG,mBAAmB,GAAGuC,IAAI,CAAC5C,IAAI,GAAG,GAAG,GAAG4C,IAAI,CAAC7C,EAAE,GAAG,GAAG;QAClG;MACA,KAAK,QAAQ;QACZoB,IAAI,GAAG6B,KAAK,GAAI,KAAK,GAAI,IAAI,CAACI,YAAY,GAAG,iBAAiB,GAAGR,IAAI,CAAC5C,IAAI,GAAG,GAAG,GAAG4C,IAAI,CAAC7C,EAAE,GAAG,GAAG;QACjG;MACA,KAAK,MAAM;QACXoB,IAAI,GAAG6B,KAAK,GAAI,KAAK,GAAI,IAAI,CAACI,YAAY,GAAG,gBAAgB,GAAGR,IAAI,CAAC5C,IAAI,GAAG,GAAG,GAAG4C,IAAI,CAAC7C,EAAE,GAAG,GAAG;QAC/F;MACA,KAAK,MAAM;QACXoB,IAAI,GAAG+B,KAAK,GAAI,KAAK,GAAIN,IAAI,CAACxC,MAAM,GAAG,kBAAkB,GAAGwC,IAAI,CAAC5C,IAAI,GAAG,GAAG,GAAG4C,IAAI,CAAC7C,EAAE,GAAG,GAAG;QAC3F;MACA,KAAK,QAAQ;QACboB,IAAI,GAAG6B,KAAK,GAAI,KAAK,GAAI,IAAI,CAACI,YAAY,GAAG,gBAAgB,GAAGR,IAAI,CAAC5C,IAAI,GAAG,GAAG,GAAG4C,IAAI,CAAC7C,EAAE,GAAG,GAAG;QAC/F;IAAM;IAGVoD,IAAI,CAAC7B,IAAI,CAACH,IAAI,CAAC;IACf,IAAI,CAACwB,QAAQ,CAACjC,IAAI,CAACyC,IAAI,CAAC;EAE1B;EACFE,kBAAkB,CAACT,IAAY,EAAEC,MAAiC;IAChE,IAAIS,IAAI,GAAG,IAAIpD,IAAI,EAAE,CAAC+C,kBAAkB,EAAE;IAC1C,IAAIE,IAAI,GAAkB,IAAI,CAACR,QAAQ,CAACtB,QAAQ,EAAE;IAClD,IAAIF,IAAI,GAAW,EAAE;IACrB,QAAQ0B,MAAM;MACZ,KAAK,KAAK;QACT1B,IAAI,GAAImC,IAAI,GAAI,KAAK,GAAI,IAAI,CAACF,YAAY,GAAI,qBAAqB,GAAGR,IAAI,CAAC5C,IAAI;QAChF;MACA,KAAK,QAAQ;QACZmB,IAAI,GAAGmC,IAAI,GAAI,KAAK,GAAI,IAAI,CAACF,YAAY,GAAG,mBAAmB,GAAGR,IAAI,CAAC5C,IAAI;QAC5E;MACA,KAAK,MAAM;QACXmB,IAAI,GAAGmC,IAAI,GAAI,KAAK,GAAI,IAAI,CAACF,YAAY,GAAG,kBAAkB,GAAGR,IAAI,CAAC5C,IAAI;QAC1E;IAAM;IAERmD,IAAI,CAAC7B,IAAI,CAACH,IAAI,CAAC;IACf,IAAI,CAACwB,QAAQ,CAACjC,IAAI,CAACyC,IAAI,CAAC;EAC1B;;AAhKWvD,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA2D,SAAZ3D,YAAY;EAAA4D,YAFX;AAAM","names":["BehaviorSubject","TasksService","constructor","taskList","id","name","created","Date","isDone","member","assignedBy","importance","deadline","end","taskList$","next","members","class","color","i","length","addTaskToHistory","memberList$","add","task","list","getValue","push","addMember","mem","done","undone","editTask","index","findIndex","e","value","for","urgent","dropTask","newMember","remove","filter","deleteall","getTaskListObs","asObservable","getMemberListObs","getHistoryListObs","history$","item","action","cDate","toLocaleString","aDate","toLocaleDateString","eDate","hist","activeMember","addMemberToHistory","date","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sebastian\\Desktop\\Pages\\angapp\\src\\app\\services\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Task } from '../model/task';\nimport { Member } from '../model/member';\nimport { NgForm } from '@angular/forms';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksService {\n  \n\n  private taskList$ = new BehaviorSubject<Array<Task>>([]);\n  private memberList$ = new BehaviorSubject<Array<Member>>([]);\n  private history$ = new BehaviorSubject<Array<string>>([]);\n  public activeMember: string = ''\n\n  constructor() {\n   const taskList = [\n      {id: 528, name: 'Water Plants', created: new Date('2023-04-23 18:10:53'), isDone: false, member: 'John', assignedBy: 'Daphne', importance: 'normal', deadline: new Date('2023-05-23 18:10:53') },\n      {id: 529, name: 'Walk the dog', created: new Date('2023-03-22 17:10:10'), isDone: false, member: 'Mark', assignedBy: 'Daphne', importance: 'low', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 530, name: 'Grocery shopping', created: new Date('2024-07-21 20:05:55'), isDone: false, member: 'Mark', assignedBy: 'Mark',  importance: 'high', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 531, name: 'Change sheets', created: new Date('2023-02-21 03:29:11'), isDone: false, member: 'Daphne', assignedBy: 'Mark', importance: 'high', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 532, name: 'Learn Angular', created: new Date('2023-04-23 15:11:11'), isDone: false, member: 'Daphne',assignedBy: 'Daphne', importance: 'normal', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 533, name: 'Clean the kitchen', created: new Date('2023-03-21 13:19:14'), end: new Date('2022-07-25 18:29:41'), isDone: true, member: 'Julian', assignedBy: 'Mark', importance: 'low', deadline: new Date('2023-05-23 18:10:53')  },\n      {id: 534, name: 'Laundry', created: new Date('2023-02-05 05:21:57'), end: new Date('2022-07-25 18:54:11'), isDone: true, member: 'Julian',assignedBy: 'Mark', importance: 'low', deadline: new Date('2023-05-23 18:10:53')},\n      {id: 527, name: 'Clean the fireplace', created: new Date('2023-02-04 05:11:17'), isDone: false, member: 'Julian',assignedBy: 'Mark', importance: 'normal', deadline: new Date('2023-05-23 18:10:53')}\n    ]\n\n    this.taskList$.next(taskList);\n  \n\n    const members: Array<Member> = [\n      {name: 'John', class: 'Adult', color: 'var(--fandango)'},\n      {name: 'Daphne', class: 'Adult', color: 'var(--thulian-pink)'},\n      {name: 'Mark', class: 'Child', color: 'var(--dutch-white)'},\n      {name: 'Julian', class: 'Child', color: 'var(--ice-blue)'},\n    ]\n\n    for(let i = 0; i < taskList.length ; i++){\n      this.addTaskToHistory(taskList[i], 'add')\n    }\n    \n    this.memberList$.next(members)\n\n  }\n\n  \n\n\n  add(task: Task): void {\n    const list = this.taskList$.getValue();\n    list.push(task)\n    this.taskList$.next(list);\n\n    this.addTaskToHistory(task, 'add')\n  }\n  addMember(member: Member){\n    const mem = this.memberList$.getValue()\n    mem.push(member)\n    this.memberList$.next(mem)\n  }\n  done(task: Task) {\n    task.end = new Date();\n    task.isDone = true;\n    var list = this.taskList$.getValue();\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'done')\n  }\n  undone(task: Task){\n    task.isDone = false;\n    delete task.end\n    let list = this.taskList$.getValue();\n    this.taskList$.next(list)\n    this.addTaskToHistory(task, 'undone')\n    \n  }\n  editTask(task:NgForm, id:number){\n    var list = this.taskList$.getValue()\n\n    const index = list.findIndex(e => e.id === id)\n\n    if (index !== -1) {\n      list[index].name = task.value.name\n      list[index].deadline = task.value.deadline\n      list[index].assignedBy = task.value.for\n      list[index].importance = task.value.urgent;\n      list[index].created = task.value.created;\n    }\n\n    this.taskList$.next(list)\n    this.addTaskToHistory(list[index], 'edit')\n  }\n  dropTask(id:number, newMember:string){\n    var list = this.taskList$.getValue()\n    const index = list.findIndex(e => e.id === id)\n    if(index !== -1){\n      list[index].member = newMember\n    }\n    this.taskList$.next(list)\n  }\n  remove(task: Task) {\n    var list = this.taskList$.getValue();\n    list = list.filter(e => e !== task);\n    this.taskList$.next(list);\n  }\n  deleteall() {\n    var list = this.taskList$.getValue();\n    list = [];\n    this.taskList$.next(list);\n  }\n\n  getTaskListObs(): Observable<Array<Task>> {\n    return this.taskList$.asObservable();\n  }\n  getMemberListObs(): Observable<Array<Member>>{\n    return this.memberList$.asObservable();\n  }\n  getHistoryListObs(): Observable<Array<string>>{\n    return this.history$.asObservable();\n  }\n  addTaskToHistory(item: Task ,  action: 'add' | 'delete' | 'edit' | 'done' | 'undone' ){\n     let cDate = item.created.toLocaleString()\n     let aDate = new Date().toLocaleDateString()\n     let eDate = item.end?.toLocaleDateString()\n\n     let hist: Array<string> = this.history$.getValue();\n     let task: string = ''\n     \n   \n        switch (action){\n          case 'add':                  \n           task =  cDate  + ' - ' +  item.assignedBy + ' added new task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'delete':            \n           task = aDate  + ' - ' +  this.activeMember + ' deleted task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'edit':        \n          task = aDate  + ' - ' +  this.activeMember + ' edited task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'done':           \n          task = eDate  + ' - ' +  item.member + ' finished task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'undone':           \n          task = aDate  + ' - ' +  this.activeMember + ' undone task: ' + item.name + '(' + item.id + ')';\n          break;\n          \n        }\n      hist.push(task)\n      this.history$.next(hist)\n      \n    }\n  addMemberToHistory(item: Member, action: 'add' | 'edit' | 'delete'){\n    let date = new Date().toLocaleDateString();\n    let hist: Array<string> = this.history$.getValue();\n    let task: string = '';\n    switch (action){\n      case 'add':                  \n       task =  date  + ' - ' +  this.activeMember  + ' added new member: ' + item.name\n      break;\n      case 'delete':            \n       task = date  + ' - ' +  this.activeMember + ' deleted member: ' + item.name\n      break;\n      case 'edit':        \n      task = date  + ' - ' +  this.activeMember + ' edited member: ' + item.name \n      break;  \n    }\n    hist.push(task)\n    this.history$.next(hist)\n  }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}