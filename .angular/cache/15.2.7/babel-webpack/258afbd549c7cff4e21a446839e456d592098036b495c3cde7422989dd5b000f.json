{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport { NgForm } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport class TasksService {\n  constructor() {\n    this.taskList$ = new BehaviorSubject([]);\n    this.memberList$ = new BehaviorSubject([]);\n    this.history$ = new BehaviorSubject([]);\n    this.activeMember = '';\n    const taskList = [{\n      id: 528,\n      name: 'Water Plants',\n      created: new Date('2023-04-23 18:10:53'),\n      isDone: false,\n      member: 'John',\n      assignedBy: 'Daphne',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 529,\n      name: 'Walk the dog',\n      created: new Date('2023-03-22 17:10:10'),\n      isDone: false,\n      member: 'Mark',\n      assignedBy: 'Daphne',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 530,\n      name: 'Grocery shopping',\n      created: new Date('2024-07-21 20:05:55'),\n      isDone: false,\n      member: 'Mark',\n      assignedBy: 'Mark',\n      importance: 'high',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 531,\n      name: 'Change sheets',\n      created: new Date('2023-02-21 03:29:11'),\n      isDone: false,\n      member: 'Daphne',\n      assignedBy: 'Mark',\n      importance: 'high',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 532,\n      name: 'Learn Angular',\n      created: new Date('2023-04-23 15:11:11'),\n      isDone: false,\n      member: 'Daphne',\n      assignedBy: 'Daphne',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 533,\n      name: 'Clean the kitchen',\n      created: new Date('2023-03-21 13:19:14'),\n      end: new Date('2022-07-25 18:29:41'),\n      isDone: true,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 534,\n      name: 'Laundry',\n      created: new Date('2023-02-05 05:21:57'),\n      end: new Date('2022-07-25 18:54:11'),\n      isDone: true,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'low',\n      deadline: new Date('2023-05-23 18:10:53')\n    }, {\n      id: 527,\n      name: 'Clean the fireplace',\n      created: new Date('2023-02-04 05:11:17'),\n      isDone: false,\n      member: 'Julian',\n      assignedBy: 'Mark',\n      importance: 'normal',\n      deadline: new Date('2023-05-23 18:10:53')\n    }];\n    this.taskList$.next(taskList);\n    const members = [{\n      name: 'John',\n      class: 'Adult',\n      color: 'var(--fandango)'\n    }, {\n      name: 'Daphne',\n      class: 'Adult',\n      color: 'var(--thulian-pink)'\n    }, {\n      name: 'Mark',\n      class: 'Child',\n      color: 'var(--dutch-white)'\n    }, {\n      name: 'Julian',\n      class: 'Child',\n      color: 'var(--ice-blue)'\n    }];\n    for (let i = 0; i < taskList.length; i++) {\n      this.addTaskToHistory(taskList[i], 'add');\n    }\n    this.memberList$.next(members);\n  }\n  add(task) {\n    const list = this.taskList$.getValue();\n    list.push(task);\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'add');\n  }\n  addMember(member) {\n    const mem = this.memberList$.getValue();\n    mem.push(member);\n    this.memberList$.next(mem);\n    this.addMemberToHistory(member, 'add');\n  }\n  deleteMember(member, active) {\n    var list = this.taskList$.getValue();\n    var mems = this.memberList$.getValue();\n    const index = mems.findIndex(e => e.name = active);\n    if (member === 'delete') {\n      list = list.filter(e => e.member !== active);\n      this.taskList$.next(list);\n      mems = mems.filter(e => e.name !== active);\n      this.memberList$.next(mems);\n    } else {\n      list = list.map(person => {\n        if (person.name === 'John') {\n          return {\n            ...person,\n            name: 'Rick'\n          };\n        } else {\n          return person;\n        }\n      }, this.addMemberToHistory(mems[index], 'delete'));\n    }\n    done(task, Task);\n    {\n      task.end = new Date();\n      task.isDone = true;\n      var list = this.taskList$.getValue();\n      this.taskList$.next(list);\n      this.addTaskToHistory(task, 'done');\n    }\n    undone(task, Task);\n    {\n      task.isDone = false;\n      delete task.end;\n      let list = this.taskList$.getValue();\n      this.taskList$.next(list);\n      this.addTaskToHistory(task, 'undone');\n    }\n    editTask(task, NgForm, id, number);\n    {\n      var list = this.taskList$.getValue();\n      const index = list.findIndex(e => e.id === id);\n      if (index !== -1) {\n        list[index].name = task.value.name;\n        list[index].deadline = task.value.deadline;\n        list[index].assignedBy = task.value.for;\n        list[index].importance = task.value.urgent;\n        list[index].created = task.value.created;\n      }\n      this.taskList$.next(list);\n      this.addTaskToHistory(list[index], 'edit');\n    }\n    dropTask(id, number, newMember, string);\n    {\n      var list = this.taskList$.getValue();\n      const index = list.findIndex(e => e.id === id);\n      if (newMember !== list[index].member) {\n        if (index !== -1) {\n          list[index].member = newMember;\n        }\n        this.taskList$.next(list);\n        this.addTaskToHistory(list[index], 'edit');\n      }\n    }\n    remove(task, Task);\n    {\n      var list = this.taskList$.getValue();\n      list = list.filter(e => e !== task);\n      this.taskList$.next(list);\n    }\n    deleteall();\n    {\n      var list = this.taskList$.getValue();\n      list = [];\n      this.taskList$.next(list);\n    }\n    getTaskListObs();\n    Observable < Array < Task >> {\n      return: this.taskList$.asObservable()\n    };\n    getMemberListObs();\n    Observable < Array < Member >> {\n      return: this.memberList$.asObservable()\n    };\n    getHistoryListObs();\n    Observable < Array < string >> {\n      return: this.history$.asObservable()\n    };\n    addTaskToHistory(item, Task, action, 'add' | 'delete' | 'edit' | 'done' | 'undone');\n    {\n      let cDate = item.created.toLocaleString();\n      let aDate = new Date().toLocaleDateString();\n      let eDate = item.end?.toLocaleDateString();\n      let hist = this.history$.getValue();\n      let task = '';\n      switch (action) {\n        case 'add':\n          task = cDate + ' - ' + item.assignedBy + ' added new task: ' + item.name + '(' + item.id + ')';\n          break;\n        case 'delete':\n          task = aDate + ' - ' + this.activeMember + ' deleted task: ' + item.name + '(' + item.id + ')';\n          break;\n        case 'edit':\n          task = aDate + ' - ' + this.activeMember + ' edited task: ' + item.name + '(' + item.id + ')';\n          break;\n        case 'done':\n          task = eDate + ' - ' + item.member + ' finished task: ' + item.name + '(' + item.id + ')';\n          break;\n        case 'undone':\n          task = aDate + ' - ' + this.activeMember + ' undone task: ' + item.name + '(' + item.id + ')';\n          break;\n      }\n      hist.push(task);\n      this.history$.next(hist);\n    }\n    addMemberToHistory(item, Member, action, 'add' | 'edit' | 'delete');\n    {\n      let date = new Date().toLocaleDateString();\n      let hist = this.history$.getValue();\n      let task = '';\n      switch (action) {\n        case 'add':\n          task = date + ' - ' + this.activeMember + ' added new member: ' + item.name;\n          break;\n        case 'delete':\n          task = date + ' - ' + this.activeMember + ' deleted member: ' + item.name;\n          break;\n        case 'edit':\n          task = date + ' - ' + this.activeMember + ' edited member: ' + item.name;\n          break;\n      }\n      hist.push(task);\n      this.history$.next(hist);\n    }\n  }\n}\nTasksService.ɵfac = function TasksService_Factory(t) {\n  return new (t || TasksService)();\n};\nTasksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TasksService,\n  factory: TasksService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","Observable","NgForm","TasksService","constructor","taskList","id","name","created","Date","isDone","member","assignedBy","importance","deadline","end","taskList$","next","members","class","color","i","length","addTaskToHistory","memberList$","add","task","list","getValue","push","addMember","mem","addMemberToHistory","deleteMember","active","mems","index","findIndex","e","filter","map","person","done","Task","undone","editTask","number","value","for","urgent","dropTask","newMember","string","remove","deleteall","getTaskListObs","Array","return","asObservable","getMemberListObs","Member","getHistoryListObs","history$","item","action","cDate","toLocaleString","aDate","toLocaleDateString","eDate","hist","activeMember","date","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sebastian\\Desktop\\Pages\\angapp\\src\\app\\services\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Task } from '../model/task';\nimport { Member } from '../model/member';\nimport { NgForm } from '@angular/forms';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksService {\n  \n\n  private taskList$ = new BehaviorSubject<Array<Task>>([]);\n  private memberList$ = new BehaviorSubject<Array<Member>>([]);\n  private history$ = new BehaviorSubject<Array<string>>([]);\n  public activeMember: string = ''\n\n  constructor() {\n   const taskList = [\n      {id: 528, name: 'Water Plants', created: new Date('2023-04-23 18:10:53'), isDone: false, member: 'John', assignedBy: 'Daphne', importance: 'normal', deadline: new Date('2023-05-23 18:10:53') },\n      {id: 529, name: 'Walk the dog', created: new Date('2023-03-22 17:10:10'), isDone: false, member: 'Mark', assignedBy: 'Daphne', importance: 'low', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 530, name: 'Grocery shopping', created: new Date('2024-07-21 20:05:55'), isDone: false, member: 'Mark', assignedBy: 'Mark',  importance: 'high', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 531, name: 'Change sheets', created: new Date('2023-02-21 03:29:11'), isDone: false, member: 'Daphne', assignedBy: 'Mark', importance: 'high', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 532, name: 'Learn Angular', created: new Date('2023-04-23 15:11:11'), isDone: false, member: 'Daphne',assignedBy: 'Daphne', importance: 'normal', deadline: new Date('2023-05-23 18:10:53')   },\n      {id: 533, name: 'Clean the kitchen', created: new Date('2023-03-21 13:19:14'), end: new Date('2022-07-25 18:29:41'), isDone: true, member: 'Julian', assignedBy: 'Mark', importance: 'low', deadline: new Date('2023-05-23 18:10:53')  },\n      {id: 534, name: 'Laundry', created: new Date('2023-02-05 05:21:57'), end: new Date('2022-07-25 18:54:11'), isDone: true, member: 'Julian',assignedBy: 'Mark', importance: 'low', deadline: new Date('2023-05-23 18:10:53')},\n      {id: 527, name: 'Clean the fireplace', created: new Date('2023-02-04 05:11:17'), isDone: false, member: 'Julian',assignedBy: 'Mark', importance: 'normal', deadline: new Date('2023-05-23 18:10:53')}\n    ]\n\n    this.taskList$.next(taskList);\n  \n\n    const members: Array<Member> = [\n      {name: 'John', class: 'Adult', color: 'var(--fandango)'},\n      {name: 'Daphne', class: 'Adult', color: 'var(--thulian-pink)'},\n      {name: 'Mark', class: 'Child', color: 'var(--dutch-white)'},\n      {name: 'Julian', class: 'Child', color: 'var(--ice-blue)'},\n    ]\n\n    for(let i = 0; i < taskList.length ; i++){\n      this.addTaskToHistory(taskList[i], 'add')\n    }\n    \n    this.memberList$.next(members)\n\n  }\n\n  \n\n\n  add(task: Task): void {\n    const list = this.taskList$.getValue();\n    list.push(task)\n    this.taskList$.next(list);\n\n    this.addTaskToHistory(task, 'add')\n  }\n  addMember(member: Member){\n    const mem = this.memberList$.getValue()\n    mem.push(member)\n    this.memberList$.next(mem)\n    this.addMemberToHistory(member, 'add')\n  }\n  deleteMember(member:string, active:string){\n    var list = this.taskList$.getValue()\n    var mems = this.memberList$.getValue()\n    const index = mems.findIndex(e => e.name = active)\n\n    if(member === 'delete'){\n      list = list.filter((e)=> e.member !== active);\n      this.taskList$.next(list)\n\n      mems = mems.filter((e)=>e.name !== active)\n      this.memberList$.next(mems)\n    } else {\n      list = list.map(person => {\n        if (person.name === 'John') {\n          return { ...person, name: 'Rick' };\n        } else {\n          return person;\n        }\n\n    }\n\n\n    this.addMemberToHistory(mems[index], 'delete')\n  }\n  done(task: Task) {\n    task.end = new Date();\n    task.isDone = true;\n    var list = this.taskList$.getValue();\n    this.taskList$.next(list);\n    this.addTaskToHistory(task, 'done')\n  }\n  undone(task: Task){\n    task.isDone = false;\n    delete task.end\n    let list = this.taskList$.getValue();\n    this.taskList$.next(list)\n    this.addTaskToHistory(task, 'undone')\n    \n  }\n  editTask(task:NgForm, id:number){\n    var list = this.taskList$.getValue()\n\n    const index = list.findIndex(e => e.id === id)\n\n    if (index !== -1) {\n      list[index].name = task.value.name\n      list[index].deadline = task.value.deadline\n      list[index].assignedBy = task.value.for\n      list[index].importance = task.value.urgent;\n      list[index].created = task.value.created;\n    }\n\n    this.taskList$.next(list)\n    this.addTaskToHistory(list[index], 'edit')\n  }\n  dropTask(id:number, newMember:string){\n    var list = this.taskList$.getValue()\n    const index = list.findIndex(e => e.id === id)\n    if(newMember !== list[index].member){\n      if(index !== -1){\n        list[index].member = newMember\n      }\n      this.taskList$.next(list)\n      this.addTaskToHistory(list[index], 'edit')\n    }\n    \n  }\n  remove(task: Task) {\n    var list = this.taskList$.getValue();\n    list = list.filter(e => e !== task);\n    this.taskList$.next(list);\n  }\n  deleteall() {\n    var list = this.taskList$.getValue();\n    list = [];\n    this.taskList$.next(list);\n  }\n\n  getTaskListObs(): Observable<Array<Task>> {\n    return this.taskList$.asObservable();\n  }\n  getMemberListObs(): Observable<Array<Member>>{\n    return this.memberList$.asObservable();\n  }\n  getHistoryListObs(): Observable<Array<string>>{\n    return this.history$.asObservable();\n  }\n  addTaskToHistory(item: Task ,  action: 'add' | 'delete' | 'edit' | 'done' | 'undone' ){\n     let cDate = item.created.toLocaleString()\n     let aDate = new Date().toLocaleDateString()\n     let eDate = item.end?.toLocaleDateString()\n\n     let hist: Array<string> = this.history$.getValue();\n     let task: string = ''\n     \n   \n        switch (action){\n          case 'add':                  \n           task =  cDate  + ' - ' +  item.assignedBy + ' added new task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'delete':            \n           task = aDate  + ' - ' +  this.activeMember + ' deleted task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'edit':        \n          task = aDate  + ' - ' +  this.activeMember + ' edited task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'done':           \n          task = eDate  + ' - ' +  item.member + ' finished task: ' + item.name + '(' + item.id + ')';\n          break;\n          case 'undone':           \n          task = aDate  + ' - ' +  this.activeMember + ' undone task: ' + item.name + '(' + item.id + ')';\n          break;\n          \n        }\n      hist.push(task)\n      this.history$.next(hist)\n      \n    }\n  addMemberToHistory(item: Member, action: 'add' | 'edit' | 'delete'){\n    let date = new Date().toLocaleDateString();\n    let hist: Array<string> = this.history$.getValue();\n    let task: string = '';\n    switch (action){\n      case 'add':                  \n       task =  date  + ' - ' +  this.activeMember  + ' added new member: ' + item.name\n      break;\n      case 'delete':            \n       task = date  + ' - ' +  this.activeMember + ' deleted member: ' + item.name\n      break;\n      case 'edit':        \n      task = date  + ' - ' +  this.activeMember + ' edited member: ' + item.name \n      break;  \n    }\n    hist.push(task)\n    this.history$.next(hist)\n  }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}