{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SortPipe {\n  transform(value, arg1, arg2, change) {\n    switch (arg1 + ' ' + arg2) {\n      case 'false false':\n        return value.sort((a, b) => {\n          if (a.created > b.created) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n        break;\n      case 'false true':\n        return value.sort((a, b) => {\n          if (a.created < b.created) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n        break;\n      case 'true false':\n        return value.sort((a, b) => {\n          if (a.name.toLowerCase() > b.name.toLowerCase()) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n        break;\n      case 'true true':\n        return value.sort((a, b) => {\n          if (a.name.toLowerCase() < b.name.toLowerCase()) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n        break;\n      default:\n        return;\n        break;\n    }\n  }\n}\nSortPipe.ɵfac = function SortPipe_Factory(t) {\n  return new (t || SortPipe)();\n};\nSortPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"sort\",\n  type: SortPipe,\n  pure: true\n});","map":{"version":3,"mappings":";AAQA,OAAM,MAAOA,QAAQ;EAGnBC,SAAS,CAACC,KAAkB,EAAEC,IAAa,EAAGC,IAAa,EAAEC,MAAa;IAExE,QAAOF,IAAI,GAAG,GAAG,GAAGC,IAAI;MACtB,KAAK,aAAa;QAChB,OAAOF,KAAK,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UAAG,IAAID,CAAC,CAACE,OAAO,GAAGD,CAAC,CAACC,OAAO,EAAE;YAAE,OAAO,CAAC;WAAE,MAAM;YAAE,OAAO,CAAC,CAAC;;QAAG,CAAC,CAAC;QAC3F;MACF,KAAK,YAAY;QACf,OAAOP,KAAK,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UAAG,IAAID,CAAC,CAACE,OAAO,GAAGD,CAAC,CAACC,OAAO,EAAE;YAAE,OAAO,CAAC;WAAE,MAAM;YAAE,OAAO,CAAC,CAAC;;QAAG,CAAC,CAAC;QAC3F;MACF,KAAK,YAAY;QACf,OAAOP,KAAK,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UAAG,IAAID,CAAC,CAACG,IAAI,CAACC,WAAW,EAAE,GAAGH,CAAC,CAACE,IAAI,CAACC,WAAW,EAAE,EAAE;YAAE,OAAO,CAAC;WAAE,MAAM;YAAE,OAAO,CAAC,CAAC;;QAAG,CAAC,CAAC;QACjH;MACF,KAAK,WAAW;QACd,OAAOT,KAAK,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UAAG,IAAID,CAAC,CAACG,IAAI,CAACC,WAAW,EAAE,GAAGH,CAAC,CAACE,IAAI,CAACC,WAAW,EAAE,EAAE;YAAE,OAAO,CAAC;WAAE,MAAM;YAAE,OAAO,CAAC,CAAC;;QAAG,CAAC,CAAC;QACjH;MACF;QACE;QACA;IAAM;EAEZ;;AAtBWX,QAAQ;mBAARA,QAAQ;AAAA;AAARA,QAAQ;;QAARA,QAAQ;EAAAY;AAAA","names":["SortPipe","transform","value","arg1","arg2","change","sort","a","b","created","name","toLowerCase","pure"],"sourceRoot":"","sources":["C:\\Users\\Sebastian\\Desktop\\Pages\\angapp\\src\\app\\shared\\sort.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { concat } from 'rxjs';\nimport { Task } from '../model/task';\n\n@Pipe({\n  name: 'sort',\n  pure: true,\n})\nexport class SortPipe implements PipeTransform {\n\n\n  transform(value: Array<Task>, arg1: boolean , arg2: boolean, change:number) {\n    \n    switch(arg1 + ' ' + arg2){\n      case 'false false':\n        return value.sort((a, b) => { if (a.created > b.created) { return 1 } else { return -1 } })\n        break;\n      case 'false true':\n        return value.sort((a, b) => { if (a.created < b.created) { return 1 } else { return -1 } })\n        break;\n      case 'true false':\n        return value.sort((a, b) => { if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1 } else { return -1 } })\n        break;\n      case 'true true':\n        return value.sort((a, b) => { if (a.name.toLowerCase() < b.name.toLowerCase()) { return 1 } else { return -1 } })\n        break;\n      default:\n        return;\n        break;\n      }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}