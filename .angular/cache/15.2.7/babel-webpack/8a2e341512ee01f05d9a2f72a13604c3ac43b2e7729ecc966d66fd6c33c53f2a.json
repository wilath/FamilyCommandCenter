{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { tap } from 'rxjs';\nlet ListComponent = class ListComponent {\n  constructor(tasksService, breakpointObserver) {\n    this.tasksService = tasksService;\n    this.breakpointObserver = breakpointObserver;\n    this.tasklist = [];\n    this.memberList = [];\n    this.showDones = [];\n    this.pipeChangeDetection = 0;\n    this.onEdit = 0;\n    this.docWidth = window.innerWidth;\n    this.isSmallScreen = false;\n    this.tasksService.getTaskListObs().pipe(tap(() => {\n      this.activatePipe();\n    })).subscribe(tasks => this.tasklist = tasks);\n    this.tasksService.getMemberListObs().pipe(tap(mem => {\n      this.createSorts(mem);\n    })).subscribe(members => this.memberList = members);\n    this.createSorts(this.memberList);\n    this.breakpointObserver.observe(['(max-width: 1350px)']).subscribe(result => {\n      this.isSmallScreen = result.matches;\n    });\n  }\n  remove(task) {\n    this.tasksService.remove(task);\n    this.tasksService.addTaskToHistory(task, 'delete');\n    this.activatePipe();\n  }\n  done(task) {\n    this.tasksService.done(task);\n    this.activatePipe();\n  }\n  edit(task) {\n    if (this.onEdit === 0) {\n      this.onEdit = task;\n    } else {\n      setTimeout(() => {\n        this.onEdit = 0;\n      }, 0);\n    }\n  }\n  cancel(task) {\n    this.onEdit = 0;\n  }\n  unDone(task) {\n    this.tasksService.undone(task);\n    this.activatePipe();\n  }\n  onEditTask(task) {\n    this.edit(task.value.id);\n    this.tasksService.editTask(task, this.onEdit);\n  }\n  switchView(n, i) {\n    switch (n) {\n      case 0:\n        this.showDones[i].show = !this.showDones[i].show;\n        break;\n      case 1:\n        this.showDones[i].sort = !this.showDones[i].sort;\n        break;\n      case 2:\n        this.showDones[i].dir = !this.showDones[i].dir;\n        break;\n    }\n  }\n  activatePipe() {\n    this.pipeChangeDetection = Math.random();\n  }\n  createSorts(mems) {\n    for (const mem of mems) {\n      this.showDones.push({\n        show: false,\n        sort: false,\n        dir: false\n      });\n    }\n  }\n  drop(e) {\n    let taskId = e.item.data;\n    let newOwner = e.container.data;\n    this.tasksService.dropTask(taskId, newOwner);\n  }\n};\nListComponent = __decorate([Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})], ListComponent);\nexport { ListComponent };","map":{"version":3,"mappings":"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","names":["Component","tap","ListComponent","constructor","tasksService","breakpointObserver","window","innerWidth","getTaskListObs","pipe","activatePipe","subscribe","tasks","tasklist","getMemberListObs","mem","createSorts","members","memberList","observe","result","isSmallScreen","matches","remove","task","addTaskToHistory","done","edit","onEdit","setTimeout","cancel","unDone","undone","onEditTask","value","id","editTask","switchView","n","i","showDones","show","sort","dir","pipeChangeDetection","Math","random","mems","push","drop","e","taskId","item","data","newOwner","container","dropTask","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Sebastian\\Desktop\\Pages\\angapp\\src\\app\\components\\list\\list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TasksService } from 'src/app/services/tasks.service';\nimport { Task } from 'src/app/model/task';\nimport { Member } from 'src/app/model/member';\nimport { Observable, Subject, tap, throwError } from 'rxjs';\nimport { NgForm } from '@angular/forms';\nimport { CdkDragDrop, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent {\n\n  tasklist: Array<Task> = [];\n  memberList: Array<Member> = [];\n  showDones: Array<sortInfo> = [];\n  pipeChangeDetection: number = 0;\n  onEdit: number = 0;\n  docWidth = window.innerWidth\n  isSmallScreen: boolean = false\n  \n\n\n  constructor(\n    private tasksService: TasksService,\n    private breakpointObserver: BreakpointObserver)\n    {\n    this.tasksService.getTaskListObs().pipe(tap(()=>{this.activatePipe()})).subscribe((tasks: Array<Task>) => this.tasklist = tasks)\n    this.tasksService.getMemberListObs().pipe(tap((mem)=>{this.createSorts(mem)})).subscribe((members: Array<Member>) => this.memberList = members);\n    this.createSorts(this.memberList)\n\n    this.breakpointObserver.observe(['(max-width: 1350px)']).subscribe(result => {\n      this.isSmallScreen = result.matches;\n     \n    });\n    }\n\n  remove(task: Task) {\n    this.tasksService.remove(task);\n    this.tasksService.addTaskToHistory(task, 'delete');\n    this.activatePipe()\n  }\n  done(task: Task) {\n    this.tasksService.done(task);\n    this.activatePipe()\n  }\n  edit(task: number ){\n    if (this.onEdit === 0 ){\n  \n      \n      this.onEdit = task\n    } else {\n    \n      setTimeout(()=>{this.onEdit = 0 },0)\n      \n    }\n  }\n  cancel(task:Task){\n         \n      this.onEdit = 0            \n  }\n  unDone(task: Task){\n      this.tasksService.undone(task);\n      this.activatePipe()\n  }\n  onEditTask(task: NgForm){\n    this.edit(task.value.id)\n    this.tasksService.editTask(task, this.onEdit)\n    \n  }\n\n  switchView(n:number, i:number){\n      switch (n){\n        case 0:\n          this.showDones[i].show = !this.showDones[i].show\n        break;\n        case 1:\n          this.showDones[i].sort = !this.showDones[i].sort \n        break;\n        case 2:\n          this.showDones[i].dir = !this.showDones[i].dir \n        break;\n      }\n  }\n  activatePipe(){\n      this.pipeChangeDetection = Math.random()\n  }\n  createSorts(mems: any){\n      for(const mem of mems){\n        this.showDones.push({show:false,sort:false,dir:false})\n      }\n    \n  }\n  drop(e:CdkDragDrop<any>){\n  let taskId = e.item.data;\n  let newOwner = e.container.data\n  this.tasksService.dropTask(taskId, newOwner)\n  }\n\n}\ninterface sortInfo{\n  show: boolean;\n  sort: boolean;\n  dir: boolean;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}