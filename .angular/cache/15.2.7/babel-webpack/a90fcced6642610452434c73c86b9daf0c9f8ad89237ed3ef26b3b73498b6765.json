{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let TasksService = /*#__PURE__*/(() => {\n  class TasksService {\n    constructor() {\n      this.taskList$ = new BehaviorSubject([]);\n      this.memberList$ = new BehaviorSubject([]);\n      this.history$ = new BehaviorSubject([]);\n      this.activeMember = '';\n      const taskList = [{\n        id: 528,\n        name: 'Water Plants',\n        created: new Date('2023-04-23 18:10:53'),\n        isDone: false,\n        member: 'John',\n        assignedBy: 'Daphne',\n        importance: 'normal',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 529,\n        name: 'Walk the dog',\n        created: new Date('2023-03-22 17:10:10'),\n        isDone: false,\n        member: 'Mark',\n        assignedBy: 'Daphne',\n        importance: 'low',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 530,\n        name: 'Grocery shopping',\n        created: new Date('2024-07-21 20:05:55'),\n        isDone: false,\n        member: 'Mark',\n        assignedBy: 'Mark',\n        importance: 'high',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 531,\n        name: 'Change sheets',\n        created: new Date('2023-02-21 03:29:11'),\n        isDone: false,\n        member: 'Daphne',\n        assignedBy: 'Mark',\n        importance: 'high',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 532,\n        name: 'Learn Angular',\n        created: new Date('2023-04-23 15:11:11'),\n        isDone: false,\n        member: 'Daphne',\n        assignedBy: 'Daphne',\n        importance: 'normal',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 533,\n        name: 'Clean the kitchen',\n        created: new Date('2023-03-21 13:19:14'),\n        end: new Date('2022-07-25 18:29:41'),\n        isDone: true,\n        member: 'Julian',\n        assignedBy: 'Mark',\n        importance: 'low',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 534,\n        name: 'Laundry',\n        created: new Date('2023-02-05 05:21:57'),\n        end: new Date('2022-07-25 18:54:11'),\n        isDone: true,\n        member: 'Julian',\n        assignedBy: 'Mark',\n        importance: 'low',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 526,\n        name: 'Wash the car',\n        created: new Date('2023-02-04 01:21:54'),\n        isDone: false,\n        member: 'John',\n        assignedBy: 'John',\n        importance: 'low',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 525,\n        name: 'Wrap presents',\n        created: new Date('2023-02-03 04:11:57'),\n        isDone: false,\n        member: 'Julian',\n        assignedBy: 'John',\n        importance: 'low',\n        deadline: new Date('2023-05-23 18:10:53')\n      }, {\n        id: 527,\n        name: 'Clean the fireplace',\n        created: new Date('2023-02-04 05:11:17'),\n        isDone: false,\n        member: 'Julian',\n        assignedBy: 'Mark',\n        importance: 'normal',\n        deadline: new Date('2023-05-23 18:10:53')\n      }];\n      const members = [{\n        name: 'John',\n        class: 'Adult',\n        color: 'var(--fandango)'\n      }, {\n        name: 'Daphne',\n        class: 'Adult',\n        color: 'var(--thulian-pink)'\n      }, {\n        name: 'Mark',\n        class: 'Child',\n        color: 'var(--dutch-white)'\n      }, {\n        name: 'Julian',\n        class: 'Child',\n        color: 'var(--ice-blue)'\n      }];\n      const storedHistory = localStorage.getItem('history');\n      const storedMembers = localStorage.getItem('members');\n      const storedTasks = localStorage.getItem('tasks');\n      if (storedHistory && storedMembers && storedTasks) {\n        this.history$.next(JSON.parse(storedHistory));\n        this.memberList$.next(JSON.parse(storedMembers));\n        this.taskList$.next(JSON.parse(storedTasks));\n      } else {\n        this.memberList$.next(members);\n        this.taskList$.next(taskList);\n        for (let i = 0; i < taskList.length; i++) {\n          this.addTaskToHistory(taskList[i], 'add');\n        }\n        localStorage.setItem(\"members\", JSON.stringify(members));\n        localStorage.setItem(\"tasks\", JSON.stringify(taskList));\n        localStorage.setItem(\"history\", JSON.stringify(this.history$.getValue()));\n      }\n    }\n    add(task) {\n      const list = this.taskList$.getValue();\n      list.push(task);\n      this.taskList$.next(list);\n      localStorage.setItem(\"tasks\", JSON.stringify(list));\n      this.addTaskToHistory(task, 'add');\n    }\n    addMember(member) {\n      const mem = this.memberList$.getValue();\n      mem.push(member);\n      this.memberList$.next(mem);\n      localStorage.setItem('members', JSON.stringify(mem));\n      this.addMemberToHistory(member, 'add');\n    }\n    deleteMember(member, active) {\n      var list = this.taskList$.getValue();\n      var mems = this.memberList$.getValue();\n      const index = mems.findIndex(e => e.name === active);\n      if (member === 'delete') {\n        list = list.filter(e => e.member !== active);\n        this.taskList$.next(list);\n        localStorage.setItem(\"tasks\", JSON.stringify(list));\n      } else {\n        list = list.map(item => {\n          if (item.member === active) {\n            return {\n              ...item,\n              member: member\n            };\n          } else {\n            return item;\n          }\n        });\n        this.taskList$.next(list);\n        localStorage.setItem(\"tasks\", JSON.stringify(list));\n      }\n      this.addMemberToHistory(mems[index], 'delete');\n      mems.splice(index, 1);\n      localStorage.setItem('members', JSON.stringify(mems));\n    }\n    done(task) {\n      task.end = new Date();\n      task.isDone = true;\n      var list = this.taskList$.getValue();\n      this.taskList$.next(list);\n      localStorage.setItem(\"tasks\", JSON.stringify(list));\n      this.addTaskToHistory(task, 'done');\n    }\n    undone(task) {\n      task.isDone = false;\n      delete task.end;\n      let list = this.taskList$.getValue();\n      this.taskList$.next(list);\n      localStorage.setItem(\"tasks\", JSON.stringify(list));\n      this.addTaskToHistory(task, 'undone');\n    }\n    editTask(task, id) {\n      var list = this.taskList$.getValue();\n      const index = list.findIndex(e => e.id === id);\n      if (index !== -1) {\n        list[index].name = task.value.name;\n        list[index].deadline = task.value.deadline;\n        list[index].assignedBy = task.value.for;\n        list[index].importance = task.value.urgent;\n        list[index].created = task.value.created;\n        if (task.value.member) {\n          list[index].member = task.value.member;\n        }\n      }\n      this.taskList$.next(list);\n      localStorage.setItem(\"tasks\", JSON.stringify(list));\n      this.addTaskToHistory(list[index], 'edit');\n    }\n    dropTask(id, newMember) {\n      var list = this.taskList$.getValue();\n      const index = list.findIndex(e => e.id === id);\n      if (newMember !== list[index].member) {\n        if (index !== -1) {\n          list[index].member = newMember;\n        }\n        this.taskList$.next(list);\n        localStorage.setItem(\"tasks\", JSON.stringify(list));\n        this.addTaskToHistory(list[index], 'edit');\n      }\n    }\n    remove(task) {\n      var list = this.taskList$.getValue();\n      list = list.filter(e => e !== task);\n      this.taskList$.next(list);\n      localStorage.setItem(\"tasks\", JSON.stringify(list));\n    }\n    deleteall() {\n      var list = this.taskList$.getValue();\n      list = [];\n      this.taskList$.next(list);\n    }\n    getTaskListObs() {\n      return this.taskList$.asObservable();\n    }\n    getMemberListObs() {\n      return this.memberList$.asObservable();\n    }\n    getHistoryListObs() {\n      return this.history$.asObservable();\n    }\n    addTaskToHistory(item, action) {\n      let cDate = item.created.toLocaleString();\n      let aDate = new Date().toLocaleDateString();\n      let eDate = item.end?.toLocaleDateString();\n      let hist = this.history$.getValue();\n      let task = '';\n      switch (action) {\n        case 'add':\n          task = cDate + ' - ' + item.assignedBy + ' added new task: ' + item.name + '(' + item.id + ')';\n          break;\n        case 'delete':\n          task = aDate + ' - ' + this.activeMember + ' deleted task: ' + item.name + '(' + item.id + ')';\n          break;\n        case 'edit':\n          task = aDate + ' - ' + this.activeMember + ' edited task: ' + item.name + '(' + item.id + ')';\n          break;\n        case 'done':\n          task = eDate + ' - ' + item.member + ' finished task: ' + item.name + '(' + item.id + ')';\n          break;\n        case 'undone':\n          task = aDate + ' - ' + this.activeMember + ' undone task: ' + item.name + '(' + item.id + ')';\n          break;\n      }\n      hist.push(task);\n      this.history$.next(hist);\n      localStorage.setItem('history', JSON.stringify(hist));\n    }\n    addMemberToHistory(item, action) {\n      let date = new Date().toLocaleDateString();\n      let hist = this.history$.getValue();\n      let task = '';\n      switch (action) {\n        case 'add':\n          task = date + ' - ' + this.activeMember + ' added new member: ' + item.name;\n          break;\n        case 'delete':\n          task = date + ' - ' + this.activeMember + ' deleted member: ' + item.name;\n          break;\n        case 'edit':\n          task = date + ' - ' + this.activeMember + ' edited member: ' + item.name;\n          break;\n      }\n      hist.push(task);\n      this.history$.next(hist);\n      localStorage.setItem('history', JSON.stringify(hist));\n    }\n  }\n  TasksService.Éµfac = function TasksService_Factory(t) {\n    return new (t || TasksService)();\n  };\n  TasksService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: TasksService,\n    factory: TasksService.Éµfac,\n    providedIn: 'root'\n  });\n  return TasksService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}